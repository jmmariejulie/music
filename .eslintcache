[{"C:\\development\\workspaces\\music\\src\\index.js":"1","C:\\development\\workspaces\\music\\src\\App.js":"2","C:\\development\\workspaces\\music\\src\\reportWebVitals.js":"3","C:\\development\\workspaces\\music\\src\\components\\Music.js":"4","C:\\development\\workspaces\\music\\src\\components\\Common.js":"5","C:\\development\\workspaces\\music\\src\\components\\Visualizer.js":"6","C:\\development\\workspaces\\music\\src\\components\\StaffVisualizer.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":237,"mtime":1610033796513,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":4931,"mtime":1610038168846,"results":"12","hashOfConfig":"9"},{"size":3325,"mtime":1610038718278,"results":"13","hashOfConfig":"9"},{"size":639,"mtime":1610032399331,"results":"14","hashOfConfig":"9"},{"size":2140,"mtime":1610038738118,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"qi6wcu",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\development\\workspaces\\music\\src\\index.js",[],["35","36"],"C:\\development\\workspaces\\music\\src\\App.js",["37"],"import logo from './logo.svg';\nimport './App.css';\n\nimport {Music} from './components/Music.js';\n\nfunction App() {\n  return (\n    <div>\n      <header>\n        <Music></Music>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","C:\\development\\workspaces\\music\\src\\reportWebVitals.js",[],"C:\\development\\workspaces\\music\\src\\components\\Music.js",["38","39","40"],"import React from 'react';\r\n\r\nimport * as mm from '@magenta/music'\r\n\r\nimport { MEL_TWINKLE, MEL_TEAPOT, writeMemory } from './Common.js';\r\nimport { Visualizer } from './Visualizer.js';\r\nimport { StaffVisualizer } from './StaffVisualizer.js';\r\n\r\nexport class Music extends React.Component {\r\n    CHECKPOINTS_DIR = 'https://storage.googleapis.com/magentadata/js/checkpoints';\r\n    SOUND_PLAYER_SOUNDFONTS_URL = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\r\n\r\n    player = undefined;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputSequence: undefined,\r\n            outputSequence: undefined\r\n        }\r\n        this.player = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n    }\r\n\r\n    testPlayer() {\r\n        // Create a player to play the sequence we'll get from the model.\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        console.log(\"Play...\");\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n        rnnPlayer.start(MEL_TWINKLE);\r\n        rnnPlayer.stop();\r\n    }\r\n\r\n    async testContinueSong() {\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n        var music_rnn = new mm.MusicRNN(this.CHECKPOINTS_DIR + '/music_rnn/basic_rnn');\r\n        await music_rnn.initialize();\r\n\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n\r\n        music_rnn\r\n            .continueSequence(MEL_TWINKLE, this.rnn_steps, this.rnn_temperature)\r\n            .then((sample) => rnnPlayer.start(sample));\r\n    }\r\n\r\n    async coconetTest() {\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        var coconet_model = new mm.Coconet(this.CHECKPOINTS_DIR + '/coconet/bach');\r\n\r\n        //coconet_model.initialize().then(()=>console.log('Coconet: initialised=' + coconet_model.initialized));\r\n\r\n        await coconet_model.initialize();\r\n\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n\r\n        var output = undefined;\r\n        try {\r\n            output = await coconet_model.infill(MEL_TEAPOT, { numIterations: 1 });\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n        coconet_model.dispose();\r\n        rnnPlayer.start(output);\r\n    }\r\n\r\n    handleInputFileChoosen = (file) => {\r\n        console.log('handleInputFileChoosen() loading file: ' + file);\r\n\r\n        let promise = mm.blobToNoteSequence(file)\r\n            .then((sample) => this.setState({ inputSequence: sample }));\r\n        console.log('handleInputFileChoosen() inputNotes: ' + promise);\r\n    }\r\n\r\n    async continueInputSequence() {\r\n        var music_rnn = new mm.MusicRNN(this.CHECKPOINTS_DIR + '/music_rnn/basic_rnn');\r\n        await music_rnn.initialize();\r\n\r\n        if (this.player.isPlaying()) {\r\n            this.player.stop();\r\n        }\r\n\r\n        let rnn_steps = 80;\r\n        let rnn_temperature = .8;\r\n        const quantitizedInputSequence = mm.sequences.quantizeNoteSequence(this.state.inputSequence, 4);\r\n        music_rnn\r\n            .continueSequence(quantitizedInputSequence, rnn_steps, rnn_temperature)\r\n            .then((sample) => {\r\n                this.setState({ outputSequence: sample });\r\n            });\r\n    }\r\n\r\n    displaySequence(sequence, canvas) {\r\n        var viz = new mm.PianoRollCanvasVisualizer(sequence, canvas);\r\n    }\r\n\r\n    saveOutputAsMidi(sequence) {\r\n        sequence.notes.forEach(n => n.velocity = 100);\r\n        const midi_bytes_array = mm.sequenceProtoToMidi(sequence);\r\n\r\n        // Convert byte array to file\r\n        const magentaFile = new Blob([midi_bytes_array], { type: 'audio/midi' });\r\n\r\n        const magentaURL = URL.createObjectURL(magentaFile);\r\n        console.log('Music.saveOutputAsMidi() url:' + magentaURL);\r\n    }\r\n\r\n    render() {\r\n        console.log('Music.render() sequence:' + this.state.inputSequence);\r\n        return (<div>\r\n            <p>Music</p>\r\n\r\n            <input\r\n                type='file'\r\n                id='fileInput'\r\n                onChange={e => this.handleInputFileChoosen(e.target.files[0])} />\r\n            <StaffVisualizer sequence={this.state.inputSequence} />\r\n            <button\r\n                onClick={() => this.continueInputSequence()}>\r\n                Continue sequence\r\n            </button>\r\n            <StaffVisualizer sequence={this.state.outputSequence} />\r\n            <button\r\n                onClick={() => this.testPlayer()}>\r\n                Test player\r\n            </button>\r\n            <button\r\n                onClick={() => this.testContinueSong()}>\r\n                Test continue sequence\r\n            </button>\r\n            <button\r\n                onClick={() => this.coconetTest()}\r\n            >Test coconet\r\n            </button>\r\n        </div>);\r\n    }\r\n}\r\n\r\n","C:\\development\\workspaces\\music\\src\\components\\Common.js",[],"C:\\development\\workspaces\\music\\src\\components\\Visualizer.js",["41","42"],"import React from 'react';\r\n\r\nimport * as mm from '@magenta/music'\r\n\r\nexport class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    displaySequence(sequence) {\r\n        var viz = new mm.PianoRollCanvasVisualizer(sequence, this.myCanvas);\r\n    }\r\n\r\n    render() {\r\n        console.log('Visualizer.render() sequence:' + this.props.sequence);\r\n        if (this.props.sequence !== undefined) {\r\n            this.displaySequence(this.props.sequence);\r\n        }\r\n        return (\r\n            <canvas ref={canvas => this.myCanvas = canvas} width='400px' height='200px' />\r\n        );\r\n    }\r\n}","C:\\development\\workspaces\\music\\src\\components\\StaffVisualizer.js",["43"],"import React from 'react';\r\n\r\nimport * as mm from '@magenta/music'\r\n\r\nimport { SOUND_PLAYER_SOUNDFONTS_URL, saveBlob } from './Common.js';\r\n\r\n\r\nexport class StaffVisualizer extends React.Component {\r\n    player = undefined;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n\r\n        this.player = new mm.SoundFontPlayer(SOUND_PLAYER_SOUNDFONTS_URL);\r\n    }\r\n\r\n    displaySequence(sequence) {\r\n        var viz = new mm.StaffSVGVisualizer(sequence, this.myRef.current);\r\n    }\r\n\r\n    play(sequence) {\r\n        if (sequence !== undefined) {\r\n            console.log(\"Play...\");\r\n            if (this.player.isPlaying()) {\r\n                this.player.stop();\r\n            }\r\n            this.player.start(sequence);\r\n            this.player.stop();\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if (this.player.isPlaying()) {\r\n            this.player.stop();\r\n        }\r\n    }\r\n\r\n    saveOutputAsMidi(sequence) {\r\n        if (sequence === undefined) {\r\n            return;\r\n        }\r\n\r\n        sequence.notes.forEach(n => n.velocity = 100);\r\n        const midi_bytes_array = mm.sequenceProtoToMidi(sequence);\r\n\r\n        // Convert byte array to file\r\n        const magentaFile = new Blob([midi_bytes_array], { type: 'audio/midi' });\r\n\r\n        const magentaURL = URL.createObjectURL(magentaFile);\r\n        console.log('Music.saveOutputAsMidi() url:' + magentaURL);\r\n\r\n        saveBlob(magentaFile, 'test.mid');\r\n    }\r\n\r\n    render() {\r\n        console.log('StaffVisualizer.render() sequence:' + this.props.sequence);\r\n        if (this.props.sequence !== undefined) {\r\n            this.displaySequence(this.props.sequence);\r\n        }\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.play(this.props.sequence)}>\r\n                    Play</button>\r\n                <button onClick={() => this.stop()}>\r\n                    Stop</button>\r\n                <button onClick={() => this.saveOutputAsMidi(this.props.sequence)}>\r\n                    Save</button>\r\n                <div ref={this.myRef} width='400px' height='200px' />\r\n            </div>\r\n        );\r\n    }\r\n}",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":8,"nodeType":"50","messageId":"51","endLine":1,"endColumn":12},{"ruleId":"48","severity":1,"message":"52","line":5,"column":35,"nodeType":"50","messageId":"51","endLine":5,"endColumn":46},{"ruleId":"48","severity":1,"message":"53","line":6,"column":10,"nodeType":"50","messageId":"51","endLine":6,"endColumn":20},{"ruleId":"48","severity":1,"message":"54","line":103,"column":13,"nodeType":"50","messageId":"51","endLine":103,"endColumn":16},{"ruleId":"55","severity":1,"message":"56","line":6,"column":5,"nodeType":"57","messageId":"58","endLine":8,"endColumn":6},{"ruleId":"48","severity":1,"message":"54","line":11,"column":13,"nodeType":"50","messageId":"51","endLine":11,"endColumn":16},{"ruleId":"48","severity":1,"message":"54","line":19,"column":13,"nodeType":"50","messageId":"51","endLine":19,"endColumn":16},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'writeMemory' is defined but never used.","'Visualizer' is defined but never used.","'viz' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]