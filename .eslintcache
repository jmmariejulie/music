[{"C:\\development\\workspaces\\music\\src\\index.js":"1","C:\\development\\workspaces\\music\\src\\reportWebVitals.js":"2","C:\\development\\workspaces\\music\\src\\App.js":"3","C:\\development\\workspaces\\music\\src\\components\\ContinueSequence.js":"4","C:\\development\\workspaces\\music\\src\\components\\TestMusic.js":"5","C:\\development\\workspaces\\music\\src\\components\\CoconetSequence.js":"6","C:\\development\\workspaces\\music\\src\\components\\Common.js":"7","C:\\development\\workspaces\\music\\src\\components\\StaffVisualizer.js":"8","C:\\development\\workspaces\\music\\src\\components\\MultiVexFlowVisualizer.tsx":"9","C:\\development\\workspaces\\music\\src\\components\\VexFlowVisualizer.tsx":"10","C:\\development\\workspaces\\music\\src\\components\\Helper.ts":"11","C:\\development\\workspaces\\music\\src\\components\\RecorderComponent.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1488,"mtime":1639315954695,"results":"16","hashOfConfig":"14"},{"size":3186,"mtime":1638617791384,"results":"17","hashOfConfig":"14"},{"size":2608,"mtime":1638617687385,"results":"18","hashOfConfig":"14"},{"size":5583,"mtime":1639317558069,"results":"19","hashOfConfig":"14"},{"size":3325,"mtime":1610038718278,"results":"20","hashOfConfig":"14"},{"size":3023,"mtime":1639315954697,"results":"21","hashOfConfig":"14"},{"size":1402,"mtime":1639315954697,"results":"22","hashOfConfig":"14"},{"size":6447,"mtime":1639315954698,"results":"23","hashOfConfig":"14"},{"size":3702,"mtime":1639315954696,"results":"24","hashOfConfig":"14"},{"size":2380,"mtime":1639315954697,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"19rs0g0",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},"C:\\development\\workspaces\\music\\src\\index.js",[],["58","59"],"C:\\development\\workspaces\\music\\src\\reportWebVitals.js",[],"C:\\development\\workspaces\\music\\src\\App.js",[],"C:\\development\\workspaces\\music\\src\\components\\ContinueSequence.js",["60"],"import React from 'react';\r\n\r\nimport * as mm from '@magenta/music'\r\nimport { StaffVisualizer } from './StaffVisualizer.js';\r\n\r\nexport class ContinueSequence extends React.Component {\r\n    CHECKPOINTS_DIR = 'https://storage.googleapis.com/magentadata/js/checkpoints';\r\n    SOUND_PLAYER_SOUNDFONTS_URL = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\r\n\r\n    player = undefined;\r\n\r\n    defaultQuantization = 4;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputSequence: undefined,\r\n            outputSequence: undefined\r\n        }\r\n        this.player = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n    }\r\n\r\n    handleInputFileChoosen = (file) => {\r\n        console.log('handleInputFileChoosen() loading file: ' + file);\r\n\r\n        let promise = mm.blobToNoteSequence(file)\r\n            .then((sample) => {\r\n                const quantitizedSequence = mm.sequences.quantizeNoteSequence(sample, this.defaultQuantization);\r\n                this.setState({ inputSequence: quantitizedSequence });\r\n            });\r\n        console.log('handleInputFileChoosen() inputNotes: ' + promise);\r\n    }\r\n\r\n    async continueInputSequence() {\r\n        var music_rnn = new mm.MusicRNN(this.CHECKPOINTS_DIR + '/music_rnn/basic_rnn');\r\n        await music_rnn.initialize();\r\n\r\n        if (this.player.isPlaying()) {\r\n            this.player.stop();\r\n        }\r\n\r\n        let rnn_steps = 80;\r\n        let rnn_temperature = .8;\r\n        const quantitizedInputSequence = mm.sequences.quantizeNoteSequence(this.state.inputSequence, 4);\r\n        music_rnn\r\n            .continueSequence(quantitizedInputSequence, rnn_steps, rnn_temperature)\r\n            .then((sample) => {\r\n                this.setState({ outputSequence: sample });\r\n            });\r\n    }\r\n\r\n    saveOutputAsMidi(sequence) {\r\n        sequence.notes.forEach(n => n.velocity = 100);\r\n        const midi_bytes_array = mm.sequenceProtoToMidi(sequence);\r\n\r\n        // Convert byte array to file\r\n        const magentaFile = new Blob([midi_bytes_array], { type: 'audio/midi' });\r\n\r\n        const magentaURL = URL.createObjectURL(magentaFile);\r\n        console.log('Music.saveOutputAsMidi() url:' + magentaURL);\r\n    }\r\n\r\n    render() {\r\n        console.log('Music.render() sequence:' + this.state.inputSequence);\r\n        const inputSequenceDefined = this.state.inputSequence !== undefined;\r\n        return (\r\n            <div>\r\n                <p>Music</p>\r\n                <div>\r\n                    <input\r\n                        type='file'\r\n                        id='fileInput'\r\n                        onChange={e => this.handleInputFileChoosen(e.target.files[0])} />\r\n                </div>\r\n                <br />\r\n                <StaffVisualizer sequence={this.state.inputSequence} />\r\n                <br />\r\n                <div>\r\n                    <button\r\n                        onClick={() => this.continueInputSequence()}>\r\n                        Continue sequence\r\n            </button>\r\n                </div>\r\n                <br />\r\n                <StaffVisualizer sequence={this.state.outputSequence} />\r\n            </div>);\r\n    }\r\n}\r\n\r\n","C:\\development\\workspaces\\music\\src\\components\\TestMusic.js",["61","62"],"import React from 'react';\r\n\r\nimport * as mm from '@magenta/music'\r\n\r\nimport { MEL_TWINKLE, MEL_TEAPOT, writeMemory } from './Common.js';\r\n\r\nexport class TestMusic extends React.Component {\r\n    CHECKPOINTS_DIR = 'https://storage.googleapis.com/magentadata/js/checkpoints';\r\n    SOUND_PLAYER_SOUNDFONTS_URL = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\r\n\r\n    testPlayer() {\r\n        // Create a player to play the sequence we'll get from the model.\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        console.log(\"Play...\");\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n        rnnPlayer.start(MEL_TWINKLE);\r\n        rnnPlayer.stop();\r\n    }\r\n\r\n    async testContinueSong() {\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n        var music_rnn = new mm.MusicRNN(this.CHECKPOINTS_DIR + '/music_rnn/basic_rnn');\r\n        await music_rnn.initialize();\r\n\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n\r\n        music_rnn\r\n            .continueSequence(MEL_TWINKLE, this.rnn_steps, this.rnn_temperature)\r\n            .then((sample) => rnnPlayer.start(sample));\r\n    }\r\n\r\n    async coconetTest() {\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        var coconet_model = new mm.Coconet(this.CHECKPOINTS_DIR + '/coconet/bach');\r\n\r\n        //coconet_model.initialize().then(()=>console.log('Coconet: initialised=' + coconet_model.initialized));\r\n\r\n        await coconet_model.initialize();\r\n\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n\r\n        var output = undefined;\r\n        try {\r\n            output = await coconet_model.infill(MEL_TWINKLE, { numIterations: 1 });\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n        coconet_model.dispose();\r\n        rnnPlayer.start(output);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Music</p>\r\n                <br />\r\n                <button\r\n                    onClick={() => this.testPlayer()}>\r\n                    Test player\r\n            </button>\r\n                <button\r\n                    onClick={() => this.testContinueSong()}>\r\n                    Test continue sequence\r\n            </button>\r\n                <button\r\n                    onClick={() => this.coconetTest()}\r\n                >Test coconet\r\n            </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","C:\\development\\workspaces\\music\\src\\components\\CoconetSequence.js",["63","64","65"],"C:\\development\\workspaces\\music\\src\\components\\Common.js",[],"C:\\development\\workspaces\\music\\src\\components\\StaffVisualizer.js",[],"C:\\development\\workspaces\\music\\src\\components\\MultiVexFlowVisualizer.tsx",["66"],"import React from 'react';\r\n\r\nimport { NoteSequence } from '@magenta/music';\r\nimport { VexFlowVisualizer } from './VexFlowVisualizer';\r\n\r\ninterface IProps {\r\n    sequences: NoteSequence[];\r\n    quantizationStep: number;\r\n}\r\n\r\ninterface IState {\r\n    hasError?: boolean;\r\n}\r\n\r\nexport class MultiVexFlowVisualizer extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error: any) {\r\n         return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error: any, errorInfo: any) {\r\n        console.log(\"MultiVexFlowVisualizer error: \" + error + \" errorInfo:\" + errorInfo);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"MultiVexFlowVisualizer render()\");\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        if (this.props.sequences) {\r\n            var sequences = this.props.sequences;\r\n            return (\r\n            <div>\r\n                {sequences.map((sequence, index) => (\r\n                    <VexFlowVisualizer key={index} sequence={sequence} quantizationStep={this.props.quantizationStep} clef={index==3?'bass':'treble'}/>\r\n                ))}\r\n            </div>\r\n            )\r\n        }\r\n        return (<h1>Nothing to display</h1>);\r\n    }\r\n}",["67","68"],"C:\\development\\workspaces\\music\\src\\components\\VexFlowVisualizer.tsx",["69"],"import React, { useRef, useEffect } from 'react';\r\n\r\n// https://ourcodeworld.com/articles/read/293/rendering-music-notation-music-sheet-in-javascript-with-vexflow-2\r\n// https://git.bz-inc.com/mirror/vexflow/-/wikis/Home\r\nimport Vex from 'vexflow'\r\n\r\nimport { midiNoteToTextNotation } from './Helper';\r\nimport { NoteSequence } from '@magenta/music';\r\n\r\ninterface IProps {\r\n    sequence: NoteSequence;\r\n    quantizationStep: number;\r\n    clef: string;\r\n}\r\n\r\ntype Voice = {\r\n    notesInBar: string;\r\n    clef: string;\r\n    stem: string;\r\n}\r\n\r\nexport const VexFlowVisualizer = (props: IProps) => {\r\n    const myRef = useRef<HTMLDivElement>(null);\r\n    var barWidth = 300;\r\n\r\n    var currentBarx = 0;\r\n    var currentBary = 20;\r\n\r\n    const displaySequence = (sequence: NoteSequence) => {\r\n        initScore(myRef.current);\r\n        // elementId has to be used.\r\n        var vf = new Vex.Flow.Factory({\r\n            renderer: {\r\n                elementId: myRef.current,\r\n                height: 200,\r\n                width: 1600\r\n            }\r\n        });\r\n\r\n        var score = vf.EasyScore();\r\n        const timeSignature = '4/4';\r\n        score.set({ time: timeSignature });\r\n\r\n        displayNoteSequence(vf, score, sequence);\r\n\r\n        vf.draw();\r\n    }\r\n\r\n    const initScore = (drawArea: any) => {\r\n        drawArea!.innerHTML = \"\";\r\n\r\n        currentBarx = 0;\r\n        currentBary = 20;\r\n    }\r\n\r\n    const makeSystem = (vf: Vex.Flow.Factory, width: number) => {\r\n        var system = vf.System({ x: currentBarx, y: currentBary, width: width, spaceBetweenStaves: 10 });\r\n        currentBarx += width;\r\n        return system;\r\n    }\r\n\r\n    const addBar = (vf: Vex.Flow.Factory, score: Vex.Flow.EasyScore, system: Vex.Flow.System, voices: Voice[], isFirstBar: boolean, width: number): Vex.Flow.System => {\r\n        let vexFlowVoices = [];\r\n        for (const voice of voices) {\r\n            let vexFlowVoice = score.voice(score.notes(voice.notesInBar, {\r\n                clef: voice.clef,\r\n                stem: voice.stem\r\n            }), null);\r\n            vexFlowVoices.push(vexFlowVoice);\r\n        }\r\n\r\n        if (isFirstBar) {\r\n            system.addStave({\r\n                voices: vexFlowVoices\r\n            }).addClef(props.clef).addTimeSignature('4/4');\r\n        } else {\r\n            system.addStave({\r\n                voices: vexFlowVoices\r\n            });\r\n        }\r\n        return system;\r\n    }\r\n\r\n\r\n    const displayNoteSequence = (vf: Vex.Flow.Factory, score: Vex.Flow.EasyScore, sequence: NoteSequence) => {\r\n        var system: Vex.Flow.System;\r\n\r\n        const bars = noteSequenceToBars(vf, score, sequence);\r\n\r\n        var firstBar = true;\r\n        for (let i = 0; i < bars.length; i++) {\r\n            const bar = bars[i];\r\n            const voice = [{\r\n                notesInBar: bar,\r\n                clef: props.clef,\r\n                stem: 'up'\r\n            }];\r\n            system = makeSystem(vf, barWidth);\r\n            addBar(vf, score, system, voice, firstBar, barWidth);\r\n            \r\n            firstBar = false;\r\n        }\r\n    }\r\n\r\n    const noteSequenceToBars = (vf: Vex.Flow.Factory, score: Vex.Flow.EasyScore, sequence: NoteSequence): string[] => {\r\n        var bars: string[] = [];\r\n\r\n        let barDuration = 0;\r\n        let notesInBar = [];\r\n        const stepsPerBar = 4 * props.quantizationStep;\r\n\r\n        for (let i = 0; i < sequence.notes.length; i++) {\r\n            const note: any = sequence.notes[i];\r\n            if (note) {\r\n                const duration = note.quantizedEndStep! - note.quantizedStartStep!;\r\n                barDuration += duration;\r\n                notesInBar.push(note);\r\n                if (barDuration >= stepsPerBar) {\r\n                    // create a new bar\r\n                    let vexFlowNotesInBar = undefined;\r\n                    let voice: Voice[];\r\n                    if (barDuration === stepsPerBar) {\r\n                        vexFlowNotesInBar = convertNotesToVexFlowNotes(notesInBar)\r\n                        voice = [{\r\n                            notesInBar: vexFlowNotesInBar,\r\n                            clef: props.clef,\r\n                            stem: 'up'\r\n                        }];\r\n                    } else {\r\n                        // last note is too long, must be splitted\r\n                        var lastNote = notesInBar[notesInBar.length - 1];\r\n                        lastNote.quantizedEndStep -= barDuration - stepsPerBar;\r\n                        vexFlowNotesInBar = convertNotesToVexFlowNotes(notesInBar)\r\n                        voice = [{\r\n                            notesInBar: vexFlowNotesInBar,\r\n                            clef: props.clef,\r\n                            stem: 'up'\r\n                        }];\r\n\r\n                        // insert a new note (this will be in the next bar)\r\n                        const noteToBeInsertedDuration = barDuration - stepsPerBar;\r\n                        const noteToBeInserted = { ...note };\r\n                        noteToBeInserted.quantizedStartStep = lastNote.quantizedEndStep + 1;\r\n                        noteToBeInserted.quantizedEndStep = noteToBeInserted.quantizedStartStep + noteToBeInsertedDuration;\r\n                        insertNote(sequence, noteToBeInserted, i + 1);\r\n                    }\r\n\r\n                    console.log(\"displayNoteSequence() notes: \" + vexFlowNotesInBar);\r\n\r\n                    bars.push(vexFlowNotesInBar);\r\n\r\n                    barDuration = 0;\r\n                    notesInBar = [];\r\n                }\r\n            }\r\n        }\r\n        return bars;\r\n    }\r\n\r\n    const insertNote = (sequence: NoteSequence, note: NoteSequence.Note, position: number) => {\r\n        sequence.notes.splice(position, 0, note);\r\n    }\r\n\r\n    const convertNotesToVexFlowNotes = (notes: NoteSequence.Note[]) => {\r\n        let vexFlowNotes = [];\r\n        for (const note of notes) {\r\n            vexFlowNotes.push(midiNoteToTextNotation(note, props.quantizationStep));\r\n        }\r\n        return vexFlowNotes.join();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!myRef.current) {\r\n            console.log(\"VexFlowVisualizer.render() no myRef: \" + myRef.current);\r\n        }\r\n        if (props.sequence && myRef.current) {\r\n            console.log('VexFlowVisualizer.render() sequence:' + props.sequence);\r\n            displaySequence(props.sequence);\r\n        }\r\n    });\r\n\r\n    return (\r\n        < div id='vexflow-visualizer' ref={myRef} />\r\n    );\r\n}","C:\\development\\workspaces\\music\\src\\components\\Helper.ts",["70","71"],"import * as mm from '@magenta/music'\r\nimport { NoteSequence } from '@magenta/music'\r\nimport { Note } from \"@tonaljs/tonal\"; // https://github.com/tonaljs/tonal\r\n\r\n// Split a noteSequence into several sequences, each per instrument\r\nexport const splitVoices = (noteSequence: NoteSequence): NoteSequence[] => {\r\n    const instruments = getInstruments(noteSequence);\r\n    const voiceNumber = instruments.length;\r\n\r\n    const noteSequences = [];\r\n    for (var i: number = 0; i < voiceNumber; i++) {\r\n        const ns = mm.sequences.clone(noteSequence);\r\n        noteSequences.push(ns);\r\n\r\n        ns.notes = [];\r\n        copyToSequence(noteSequence, ns, i);\r\n    }\r\n\r\n    return noteSequences;\r\n}\r\n\r\nexport const midiNoteToTextNotation = (note: NoteSequence.Note, quantizationStep: number): string => {\r\n    return getDuration(note, quantizationStep);\r\n}   \r\n\r\nconst toNoteName = (magentaNote: NoteSequence.Note): string => {\r\n    return Note.fromMidiSharps(magentaNote.pitch);\r\n}\r\n\r\nconst getDuration = (note: NoteSequence.Note, quantizationStep: number): string => {\r\n    const durationQuantized = note.quantizedEndStep - note.quantizedStartStep;\r\n    //const durationQuantizedStep = durationQuantized / (quantizationStep / 4);\r\n    let durationQuantizedStep = durationQuantized;\r\n    if(quantizationStep == 2) {\r\n        durationQuantizedStep  = durationQuantized * 2;\r\n    } else if(quantizationStep == 1) {\r\n        durationQuantizedStep  = durationQuantized * 4;\r\n    }  \r\n\r\n    switch (durationQuantizedStep) {\r\n        case 16: return toNoteName(note) + '/w'; // ronde\r\n        case 15: return toNoteName(note) + '/h., ' + toNoteName(note) + '/8.'; // blanche pointee + une croche pointee\r\n        case 14: return toNoteName(note) + '/h., ' + toNoteName(note) + '/8'; // blanche pointee + une croche\r\n        case 13: return toNoteName(note) + '/h., ' + toNoteName(note) + '/16'; // blanche pointee + une double croche\r\n        case 12: return toNoteName(note) + '/h.'; // blanche pointee\r\n        case 11: return toNoteName(note) + '/h, ' + toNoteName(note) + '/8.'; // blanche + une croche pointee\r\n        case 10: return toNoteName(note) + '/h, ' + toNoteName(note) + '/8'; // blanche + une croche\r\n        case 9: return toNoteName(note) + '/h, ' + toNoteName(note) + '/16'; // blanche + une double croche\r\n        case 8: return toNoteName(note) + '/h'; // blanche\r\n        case 7: return toNoteName(note) + '/q.'; // noire pointee\r\n        case 6: return toNoteName(note) + '/q.'; // noire pointee\r\n        case 5: return toNoteName(note) + '/q, ' + toNoteName(note) + '/16'; // noire + une double croche\r\n        case 4: return toNoteName(note) + '/q'; // noire\r\n        case 3: return toNoteName(note) + '/8.'; // croche pointee\r\n        case 2: return toNoteName(note) + '/8'; // croche\r\n        case 1: return toNoteName(note) + '/16'; // double croche\r\n    }\r\n\r\n    return \"unrecognized durationQuantized: \" + durationQuantized + \" durationQuantizedStep: \" + durationQuantizedStep;\r\n}\r\n\r\nconst getInstruments = (noteSequence: NoteSequence): number[] => {\r\n    let instruments: number[] = [];\r\n    for (var i = 0; i < noteSequence.notes.length; i++) {\r\n        const note = noteSequence.notes[i];\r\n        if (!instruments.includes(note.instrument!)) {\r\n            instruments.push(note.instrument!);\r\n        }\r\n    }\r\n    return instruments;\r\n}\r\n\r\nconst copyToSequence = (sourceSequence: NoteSequence, destSequence: NoteSequence, instrument: number): void => {\r\n    for (var i = 0; i < sourceSequence.notes.length; i++) {\r\n        const note = sourceSequence.notes[i];\r\n        if (note.instrument === instrument) {\r\n            destSequence.notes.push(note);\r\n        }\r\n    }\r\n}\r\n\r\n","C:\\development\\workspaces\\music\\src\\components\\RecorderComponent.js",["72"],"import React from 'react';\r\n\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport * as mm from '@magenta/music'\r\nimport { SOUND_PLAYER_SOUNDFONTS_URL, saveBlob } from './Common.js';\r\n\r\n\r\nexport class RecorderComponent extends React.Component {\r\n    tempo = 60;\r\n    recorder = undefined;\r\n    player = undefined;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n        this.player = new mm.SoundFontPlayer(SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        this.recorder = new mm.Recorder();\r\n        this.recorder.initialize();\r\n        this.recorder.setTempo(this.tempo);\r\n        this.recorder.enablePlayClick();\r\n    }\r\n\r\n    // Stream recording.\r\n    record = () => {\r\n        this.recorder.callbackObject = {\r\n            run: (seq) => {\r\n                console.log('RecorderComponent.record() ' + seq);\r\n                if (seq) {\r\n                    // tslint:disable-next-line:no-unused-expression\r\n                    seq.tempos.push({ qpm: this.tempo });\r\n                    new mm.StaffSVGVisualizer(seq, this.myRef.current);\r\n                }\r\n            },\r\n            noteOn: (pitch, velocity, device) => {\r\n                console.log('We have received a noteOn event!');\r\n            },\r\n            noteOff: (pitch, velocity, device) => { console.log('We have received a noteOff event!') }\r\n        };\r\n        this.recorder.start();\r\n    };\r\n\r\n    stop = () => {\r\n        const seq = this.recorder.stop();\r\n\r\n        if (seq) {\r\n            seq.tempos = [];\r\n            seq.tempos.push({ qpm: this.tempo, time: 0 });\r\n            console.log('RecorderComponent.stop() ' + seq);\r\n            new mm.StaffSVGVisualizer(seq, this.myRef.current);\r\n\r\n            this.props.setSequence(seq);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ButtonGroup className=\"mb-2\">\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => this.record()}>\r\n                        Record</Button>\r\n                    <Button\r\n                        variant=\"primary\" onClick={() => this.stop()}>\r\n                        Stop</Button>\r\n                </ButtonGroup>\r\n                <div ref={this.myRef} width='400px' height='200px' />\r\n            </div>\r\n        );\r\n    }\r\n}",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":65,"column":15,"nodeType":"79","messageId":"80","endLine":65,"endColumn":35},{"ruleId":"77","severity":1,"message":"81","line":5,"column":23,"nodeType":"79","messageId":"80","endLine":5,"endColumn":33},{"ruleId":"77","severity":1,"message":"82","line":5,"column":35,"nodeType":"79","messageId":"80","endLine":5,"endColumn":46},{"ruleId":"77","severity":1,"message":"83","line":38,"column":13,"nodeType":"79","messageId":"80","endLine":38,"endColumn":20},{"ruleId":"77","severity":1,"message":"78","line":94,"column":15,"nodeType":"79","messageId":"80","endLine":94,"endColumn":35},{"ruleId":"77","severity":1,"message":"84","line":95,"column":15,"nodeType":"79","messageId":"80","endLine":95,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":41,"column":130,"nodeType":"87","messageId":"88","endLine":41,"endColumn":132},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"89","severity":1,"message":"90","line":134,"column":25,"nodeType":"79","messageId":"80","endLine":134,"endColumn":30},{"ruleId":"85","severity":1,"message":"86","line":34,"column":25,"nodeType":"87","messageId":"88","endLine":34,"endColumn":27},{"ruleId":"85","severity":1,"message":"86","line":36,"column":32,"nodeType":"87","messageId":"88","endLine":36,"endColumn":34},{"ruleId":"77","severity":1,"message":"91","line":7,"column":39,"nodeType":"79","messageId":"80","endLine":7,"endColumn":47},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'inputSequenceDefined' is assigned a value but never used.","Identifier","unusedVar","'MEL_TEAPOT' is defined but never used.","'writeMemory' is defined but never used.","'promise' is assigned a value but never used.","'sequence' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'voice' is assigned a value but never used.","'saveBlob' is defined but never used.","no-global-assign","no-unsafe-negation"]