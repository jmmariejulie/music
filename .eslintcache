[{"C:\\development\\workspaces\\music\\src\\index.js":"1","C:\\development\\workspaces\\music\\src\\reportWebVitals.js":"2","C:\\development\\workspaces\\music\\src\\App.js":"3","C:\\development\\workspaces\\music\\src\\components\\ContinueSequence.js":"4","C:\\development\\workspaces\\music\\src\\components\\TestMusic.js":"5","C:\\development\\workspaces\\music\\src\\components\\Common.js":"6","C:\\development\\workspaces\\music\\src\\components\\StaffVisualizer.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":1149,"mtime":1610381957140,"results":"11","hashOfConfig":"9"},{"size":3190,"mtime":1610383064251,"results":"12","hashOfConfig":"9"},{"size":2607,"mtime":1610381957141,"results":"13","hashOfConfig":"9"},{"size":3325,"mtime":1610038718278,"results":"14","hashOfConfig":"9"},{"size":2490,"mtime":1610383008035,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"qi6wcu",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\development\\workspaces\\music\\src\\index.js",[],["34","35"],"C:\\development\\workspaces\\music\\src\\reportWebVitals.js",[],"C:\\development\\workspaces\\music\\src\\App.js",[],"C:\\development\\workspaces\\music\\src\\components\\ContinueSequence.js",["36"],"import React from 'react';\r\n\r\nimport * as mm from '@magenta/music'\r\n\r\nimport { StaffVisualizer } from './StaffVisualizer.js';\r\n\r\nexport class ContinueSequence extends React.Component {\r\n    CHECKPOINTS_DIR = 'https://storage.googleapis.com/magentadata/js/checkpoints';\r\n    SOUND_PLAYER_SOUNDFONTS_URL = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\r\n\r\n    player = undefined;\r\n\r\n    defaultQuantization = 4;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputSequence: undefined,\r\n            outputSequence: undefined\r\n        }\r\n        this.player = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n    }\r\n\r\n    handleInputFileChoosen = (file) => {\r\n        console.log('handleInputFileChoosen() loading file: ' + file);\r\n\r\n        let promise = mm.blobToNoteSequence(file)\r\n            .then((sample) => {\r\n                const quantitizedSequence = mm.sequences.quantizeNoteSequence(sample, this.defaultQuantization);\r\n                this.setState({ inputSequence: quantitizedSequence });\r\n            });\r\n        console.log('handleInputFileChoosen() inputNotes: ' + promise);\r\n    }\r\n\r\n    async continueInputSequence() {\r\n        var music_rnn = new mm.MusicRNN(this.CHECKPOINTS_DIR + '/music_rnn/basic_rnn');\r\n        await music_rnn.initialize();\r\n\r\n        if (this.player.isPlaying()) {\r\n            this.player.stop();\r\n        }\r\n\r\n        let rnn_steps = 80;\r\n        let rnn_temperature = .8;\r\n        const quantitizedInputSequence = mm.sequences.quantizeNoteSequence(this.state.inputSequence, 4);\r\n        music_rnn\r\n            .continueSequence(quantitizedInputSequence, rnn_steps, rnn_temperature)\r\n            .then((sample) => {\r\n                this.setState({ outputSequence: sample });\r\n            });\r\n    }\r\n\r\n    saveOutputAsMidi(sequence) {\r\n        sequence.notes.forEach(n => n.velocity = 100);\r\n        const midi_bytes_array = mm.sequenceProtoToMidi(sequence);\r\n\r\n        // Convert byte array to file\r\n        const magentaFile = new Blob([midi_bytes_array], { type: 'audio/midi' });\r\n\r\n        const magentaURL = URL.createObjectURL(magentaFile);\r\n        console.log('Music.saveOutputAsMidi() url:' + magentaURL);\r\n    }\r\n\r\n    render() {\r\n        console.log('Music.render() sequence:' + this.state.inputSequence);\r\n        const inputSequenceDefined = this.state.inputSequence !== undefined;\r\n        return (\r\n            <div>\r\n                <p>Music</p>\r\n                <div>\r\n                    <input\r\n                        type='file'\r\n                        id='fileInput'\r\n                        onChange={e => this.handleInputFileChoosen(e.target.files[0])} />\r\n                </div>\r\n                <br />\r\n                <StaffVisualizer sequence={this.state.inputSequence} />\r\n                <br />\r\n                <div>\r\n                    <button\r\n                        onClick={() => this.continueInputSequence()}>\r\n                        Continue sequence\r\n            </button>\r\n                </div>\r\n                <br />\r\n                <StaffVisualizer sequence={this.state.outputSequence} />\r\n\r\n            </div>);\r\n    }\r\n}\r\n\r\n","C:\\development\\workspaces\\music\\src\\components\\TestMusic.js",["37"],"import React from 'react';\r\n\r\nimport * as mm from '@magenta/music'\r\n\r\nimport { MEL_TWINKLE, MEL_TEAPOT, writeMemory } from './Common.js';\r\n\r\nexport class TestMusic extends React.Component {\r\n    CHECKPOINTS_DIR = 'https://storage.googleapis.com/magentadata/js/checkpoints';\r\n    SOUND_PLAYER_SOUNDFONTS_URL = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\r\n\r\n    testPlayer() {\r\n        // Create a player to play the sequence we'll get from the model.\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        console.log(\"Play...\");\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n        rnnPlayer.start(MEL_TWINKLE);\r\n        rnnPlayer.stop();\r\n    }\r\n\r\n    async testContinueSong() {\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n        var music_rnn = new mm.MusicRNN(this.CHECKPOINTS_DIR + '/music_rnn/basic_rnn');\r\n        await music_rnn.initialize();\r\n\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n\r\n        music_rnn\r\n            .continueSequence(MEL_TWINKLE, this.rnn_steps, this.rnn_temperature)\r\n            .then((sample) => rnnPlayer.start(sample));\r\n    }\r\n\r\n    async coconetTest() {\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        var coconet_model = new mm.Coconet(this.CHECKPOINTS_DIR + '/coconet/bach');\r\n\r\n        //coconet_model.initialize().then(()=>console.log('Coconet: initialised=' + coconet_model.initialized));\r\n\r\n        await coconet_model.initialize();\r\n\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n\r\n        var output = undefined;\r\n        try {\r\n            output = await coconet_model.infill(MEL_TEAPOT, { numIterations: 1 });\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n        coconet_model.dispose();\r\n        rnnPlayer.start(output);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Music</p>\r\n                <br />\r\n                <button\r\n                    onClick={() => this.testPlayer()}>\r\n                    Test player\r\n            </button>\r\n                <button\r\n                    onClick={() => this.testContinueSong()}>\r\n                    Test continue sequence\r\n            </button>\r\n                <button\r\n                    onClick={() => this.coconetTest()}\r\n                >Test coconet\r\n            </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","C:\\development\\workspaces\\music\\src\\components\\Common.js",[],["38","39"],"C:\\development\\workspaces\\music\\src\\components\\StaffVisualizer.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":66,"column":15,"nodeType":"46","messageId":"47","endLine":66,"endColumn":35},{"ruleId":"44","severity":1,"message":"48","line":5,"column":35,"nodeType":"46","messageId":"47","endLine":5,"endColumn":46},{"ruleId":"40","replacedBy":"49"},{"ruleId":"42","replacedBy":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'inputSequenceDefined' is assigned a value but never used.","Identifier","unusedVar","'writeMemory' is defined but never used.",["51"],["52"],"no-global-assign","no-unsafe-negation"]