[{"C:\\development\\workspace\\music\\src\\index.js":"1","C:\\development\\workspace\\music\\src\\reportWebVitals.js":"2","C:\\development\\workspace\\music\\src\\App.js":"3","C:\\development\\workspace\\music\\src\\components\\CoconetSequence.js":"4","C:\\development\\workspace\\music\\src\\components\\ContinueSequence.js":"5","C:\\development\\workspace\\music\\src\\components\\TestMusic.js":"6","C:\\development\\workspace\\music\\src\\components\\StaffVisualizer.js":"7","C:\\development\\workspace\\music\\src\\components\\Common.js":"8","C:\\development\\workspace\\music\\src\\components\\RecorderComponent.js":"9","C:\\development\\workspace\\music\\src\\components\\Helper.ts":"10","C:\\development\\workspace\\music\\src\\components\\VexFlowVisualizer.tsx":"11","C:\\development\\workspace\\music\\src\\components\\MultiVexFlowVisualizer.tsx":"12"},{"size":517,"mtime":1610203751773,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1610203751775,"results":"15","hashOfConfig":"14"},{"size":1488,"mtime":1638722300566,"results":"16","hashOfConfig":"14"},{"size":5491,"mtime":1639309067491,"results":"17","hashOfConfig":"14"},{"size":3186,"mtime":1638627366247,"results":"18","hashOfConfig":"14"},{"size":2608,"mtime":1638627366250,"results":"19","hashOfConfig":"14"},{"size":3023,"mtime":1639142786027,"results":"20","hashOfConfig":"14"},{"size":3325,"mtime":1610203751768,"results":"21","hashOfConfig":"14"},{"size":2380,"mtime":1638792691862,"results":"22","hashOfConfig":"14"},{"size":3702,"mtime":1639308537318,"results":"23","hashOfConfig":"14"},{"size":6447,"mtime":1639307919831,"results":"24","hashOfConfig":"14"},{"size":1402,"mtime":1639235839172,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"zhwryd",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"C:\\development\\workspace\\music\\src\\index.js",[],["56","57"],"C:\\development\\workspace\\music\\src\\reportWebVitals.js",[],"C:\\development\\workspace\\music\\src\\App.js",[],"C:\\development\\workspace\\music\\src\\components\\CoconetSequence.js",["58","59","60","61"],"C:\\development\\workspace\\music\\src\\components\\ContinueSequence.js",["62"],"import React from 'react';\r\n\r\nimport * as mm from '@magenta/music'\r\nimport { StaffVisualizer } from './StaffVisualizer.js';\r\n\r\nexport class ContinueSequence extends React.Component {\r\n    CHECKPOINTS_DIR = 'https://storage.googleapis.com/magentadata/js/checkpoints';\r\n    SOUND_PLAYER_SOUNDFONTS_URL = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\r\n\r\n    player = undefined;\r\n\r\n    defaultQuantization = 4;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputSequence: undefined,\r\n            outputSequence: undefined\r\n        }\r\n        this.player = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n    }\r\n\r\n    handleInputFileChoosen = (file) => {\r\n        console.log('handleInputFileChoosen() loading file: ' + file);\r\n\r\n        let promise = mm.blobToNoteSequence(file)\r\n            .then((sample) => {\r\n                const quantitizedSequence = mm.sequences.quantizeNoteSequence(sample, this.defaultQuantization);\r\n                this.setState({ inputSequence: quantitizedSequence });\r\n            });\r\n        console.log('handleInputFileChoosen() inputNotes: ' + promise);\r\n    }\r\n\r\n    async continueInputSequence() {\r\n        var music_rnn = new mm.MusicRNN(this.CHECKPOINTS_DIR + '/music_rnn/basic_rnn');\r\n        await music_rnn.initialize();\r\n\r\n        if (this.player.isPlaying()) {\r\n            this.player.stop();\r\n        }\r\n\r\n        let rnn_steps = 80;\r\n        let rnn_temperature = .8;\r\n        const quantitizedInputSequence = mm.sequences.quantizeNoteSequence(this.state.inputSequence, 4);\r\n        music_rnn\r\n            .continueSequence(quantitizedInputSequence, rnn_steps, rnn_temperature)\r\n            .then((sample) => {\r\n                this.setState({ outputSequence: sample });\r\n            });\r\n    }\r\n\r\n    saveOutputAsMidi(sequence) {\r\n        sequence.notes.forEach(n => n.velocity = 100);\r\n        const midi_bytes_array = mm.sequenceProtoToMidi(sequence);\r\n\r\n        // Convert byte array to file\r\n        const magentaFile = new Blob([midi_bytes_array], { type: 'audio/midi' });\r\n\r\n        const magentaURL = URL.createObjectURL(magentaFile);\r\n        console.log('Music.saveOutputAsMidi() url:' + magentaURL);\r\n    }\r\n\r\n    render() {\r\n        console.log('Music.render() sequence:' + this.state.inputSequence);\r\n        const inputSequenceDefined = this.state.inputSequence !== undefined;\r\n        return (\r\n            <div>\r\n                <p>Music</p>\r\n                <div>\r\n                    <input\r\n                        type='file'\r\n                        id='fileInput'\r\n                        onChange={e => this.handleInputFileChoosen(e.target.files[0])} />\r\n                </div>\r\n                <br />\r\n                <StaffVisualizer sequence={this.state.inputSequence} />\r\n                <br />\r\n                <div>\r\n                    <button\r\n                        onClick={() => this.continueInputSequence()}>\r\n                        Continue sequence\r\n            </button>\r\n                </div>\r\n                <br />\r\n                <StaffVisualizer sequence={this.state.outputSequence} />\r\n            </div>);\r\n    }\r\n}\r\n\r\n","C:\\development\\workspace\\music\\src\\components\\TestMusic.js",["63","64"],"import React from 'react';\r\n\r\nimport * as mm from '@magenta/music'\r\n\r\nimport { MEL_TWINKLE, MEL_TEAPOT, writeMemory } from './Common.js';\r\n\r\nexport class TestMusic extends React.Component {\r\n    CHECKPOINTS_DIR = 'https://storage.googleapis.com/magentadata/js/checkpoints';\r\n    SOUND_PLAYER_SOUNDFONTS_URL = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\r\n\r\n    testPlayer() {\r\n        // Create a player to play the sequence we'll get from the model.\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        console.log(\"Play...\");\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n        rnnPlayer.start(MEL_TWINKLE);\r\n        rnnPlayer.stop();\r\n    }\r\n\r\n    async testContinueSong() {\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n        var music_rnn = new mm.MusicRNN(this.CHECKPOINTS_DIR + '/music_rnn/basic_rnn');\r\n        await music_rnn.initialize();\r\n\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n\r\n        music_rnn\r\n            .continueSequence(MEL_TWINKLE, this.rnn_steps, this.rnn_temperature)\r\n            .then((sample) => rnnPlayer.start(sample));\r\n    }\r\n\r\n    async coconetTest() {\r\n        var rnnPlayer = new mm.SoundFontPlayer(this.SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        var coconet_model = new mm.Coconet(this.CHECKPOINTS_DIR + '/coconet/bach');\r\n\r\n        //coconet_model.initialize().then(()=>console.log('Coconet: initialised=' + coconet_model.initialized));\r\n\r\n        await coconet_model.initialize();\r\n\r\n        if (rnnPlayer.isPlaying()) {\r\n            rnnPlayer.stop();\r\n            return;\r\n        }\r\n\r\n        var output = undefined;\r\n        try {\r\n            output = await coconet_model.infill(MEL_TWINKLE, { numIterations: 1 });\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n        coconet_model.dispose();\r\n        rnnPlayer.start(output);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Music</p>\r\n                <br />\r\n                <button\r\n                    onClick={() => this.testPlayer()}>\r\n                    Test player\r\n            </button>\r\n                <button\r\n                    onClick={() => this.testContinueSong()}>\r\n                    Test continue sequence\r\n            </button>\r\n                <button\r\n                    onClick={() => this.coconetTest()}\r\n                >Test coconet\r\n            </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","C:\\development\\workspace\\music\\src\\components\\StaffVisualizer.js",[],"C:\\development\\workspace\\music\\src\\components\\Common.js",[],"C:\\development\\workspace\\music\\src\\components\\RecorderComponent.js",["65"],"import React from 'react';\r\n\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport * as mm from '@magenta/music'\r\nimport { SOUND_PLAYER_SOUNDFONTS_URL, saveBlob } from './Common.js';\r\n\r\n\r\nexport class RecorderComponent extends React.Component {\r\n    tempo = 60;\r\n    recorder = undefined;\r\n    player = undefined;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n        this.player = new mm.SoundFontPlayer(SOUND_PLAYER_SOUNDFONTS_URL);\r\n\r\n        this.recorder = new mm.Recorder();\r\n        this.recorder.initialize();\r\n        this.recorder.setTempo(this.tempo);\r\n        this.recorder.enablePlayClick();\r\n    }\r\n\r\n    // Stream recording.\r\n    record = () => {\r\n        this.recorder.callbackObject = {\r\n            run: (seq) => {\r\n                console.log('RecorderComponent.record() ' + seq);\r\n                if (seq) {\r\n                    // tslint:disable-next-line:no-unused-expression\r\n                    seq.tempos.push({ qpm: this.tempo });\r\n                    new mm.StaffSVGVisualizer(seq, this.myRef.current);\r\n                }\r\n            },\r\n            noteOn: (pitch, velocity, device) => {\r\n                console.log('We have received a noteOn event!');\r\n            },\r\n            noteOff: (pitch, velocity, device) => { console.log('We have received a noteOff event!') }\r\n        };\r\n        this.recorder.start();\r\n    };\r\n\r\n    stop = () => {\r\n        const seq = this.recorder.stop();\r\n\r\n        if (seq) {\r\n            seq.tempos = [];\r\n            seq.tempos.push({ qpm: this.tempo, time: 0 });\r\n            console.log('RecorderComponent.stop() ' + seq);\r\n            new mm.StaffSVGVisualizer(seq, this.myRef.current);\r\n\r\n            this.props.setSequence(seq);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ButtonGroup className=\"mb-2\">\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => this.record()}>\r\n                        Record</Button>\r\n                    <Button\r\n                        variant=\"primary\" onClick={() => this.stop()}>\r\n                        Stop</Button>\r\n                </ButtonGroup>\r\n                <div ref={this.myRef} width='400px' height='200px' />\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\development\\workspace\\music\\src\\components\\Helper.ts",["66","67"],"C:\\development\\workspace\\music\\src\\components\\VexFlowVisualizer.tsx",["68"],"C:\\development\\workspace\\music\\src\\components\\MultiVexFlowVisualizer.tsx",["69"],"import React from 'react';\r\n\r\nimport { NoteSequence } from '@magenta/music';\r\nimport { VexFlowVisualizer } from './VexFlowVisualizer';\r\n\r\ninterface IProps {\r\n    sequences: NoteSequence[];\r\n    quantizationStep: number;\r\n}\r\n\r\ninterface IState {\r\n    hasError?: boolean;\r\n}\r\n\r\nexport class MultiVexFlowVisualizer extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error: any) {\r\n         return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error: any, errorInfo: any) {\r\n        console.log(\"MultiVexFlowVisualizer error: \" + error + \" errorInfo:\" + errorInfo);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"MultiVexFlowVisualizer render()\");\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        if (this.props.sequences) {\r\n            var sequences = this.props.sequences;\r\n            return (\r\n            <div>\r\n                {sequences.map((sequence, index) => (\r\n                    <VexFlowVisualizer key={index} sequence={sequence} quantizationStep={this.props.quantizationStep} clef={index==3?'bass':'treble'}/>\r\n                ))}\r\n            </div>\r\n            )\r\n        }\r\n        return (<h1>Nothing to display</h1>);\r\n    }\r\n}",["70","71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":27},{"ruleId":"76","severity":1,"message":"80","line":36,"column":13,"nodeType":"78","messageId":"79","endLine":36,"endColumn":20},{"ruleId":"76","severity":1,"message":"81","line":92,"column":15,"nodeType":"78","messageId":"79","endLine":92,"endColumn":35},{"ruleId":"76","severity":1,"message":"82","line":93,"column":15,"nodeType":"78","messageId":"79","endLine":93,"endColumn":23},{"ruleId":"76","severity":1,"message":"81","line":65,"column":15,"nodeType":"78","messageId":"79","endLine":65,"endColumn":35},{"ruleId":"76","severity":1,"message":"83","line":5,"column":23,"nodeType":"78","messageId":"79","endLine":5,"endColumn":33},{"ruleId":"76","severity":1,"message":"84","line":5,"column":35,"nodeType":"78","messageId":"79","endLine":5,"endColumn":46},{"ruleId":"76","severity":1,"message":"85","line":7,"column":39,"nodeType":"78","messageId":"79","endLine":7,"endColumn":47},{"ruleId":"86","severity":1,"message":"87","line":34,"column":25,"nodeType":"88","messageId":"89","endLine":34,"endColumn":27},{"ruleId":"86","severity":1,"message":"87","line":36,"column":32,"nodeType":"88","messageId":"89","endLine":36,"endColumn":34},{"ruleId":"90","severity":1,"message":"91","line":134,"column":25,"nodeType":"78","messageId":"79","endLine":134,"endColumn":30},{"ruleId":"86","severity":1,"message":"87","line":41,"column":130,"nodeType":"88","messageId":"89","endLine":41,"endColumn":132},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'VexFlowVisualizer' is defined but never used.","Identifier","unusedVar","'promise' is assigned a value but never used.","'inputSequenceDefined' is assigned a value but never used.","'sequence' is assigned a value but never used.","'MEL_TEAPOT' is defined but never used.","'writeMemory' is defined but never used.","'saveBlob' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'voice' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]